{"version":3,"sources":["resources/amanda.jpg","components/navbar.js","components/hero.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","id","className","type","data-toggle","data-target","href","Component","Hero","class","src","amanda","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,oC,uMCEtBC,G,mLAEjB,OAEE,6BACE,yBAAKC,GAAG,SAASC,UAAU,0DACzB,4BAAQA,UAAU,4BAA4BC,KAAK,SAASC,cAAY,WAAWC,cAAY,sBAC7F,0BAAMH,UAAU,yBAElB,yBAAKA,UAAU,+CAA+CD,GAAG,qBAC/D,wBAAIC,UAAU,cACZ,wBAAIA,UAAU,YACZ,uBAAGA,UAAU,WAAWI,KAAK,oBAA7B,UAEF,wBAAIJ,UAAU,YACZ,uBAAGA,UAAU,WAAWI,KAAK,aAA7B,aAEF,wBAAIJ,UAAU,YACZ,uBAAGA,UAAU,WAAWI,KAAK,YAA7B,YAEF,wBAAIJ,UAAU,YACZ,uBAAGA,UAAU,WAAWI,KAAK,gBAA7B,gBAEF,wBAAIJ,UAAU,YACZ,uBAAGA,UAAU,WAAWI,KAAK,YAA7B,oB,GAxBoBC,c,gBCCfC,E,uKAEjB,OAEI,yBAAKN,UAAU,YACX,yBAAKO,MAAM,aACP,6BAASR,GAAG,kBAAkBQ,MAAM,sEAChC,yBAAKC,IAAKC,IAAQF,MAAM,6BACxB,yBAAKA,MAAM,6BACX,kDACA,mE,GAVcF,aCmBnBK,E,uKAdX,OACF,yBAAKX,GAAG,QAEP,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,yBAAKC,UAAU,QACd,uCACA,2I,GATcK,aCMEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ed82416f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/amanda.b704d0d0.jpg\";","import React, { Component } from 'react'\r\n\r\nexport default class Navbar extends Component {\r\n  render() {\r\n    return (\r\n\r\n      <div>\r\n        <nav id=\"navbar\" className=\"bg-dark navbar-dark  navbar navbar-expand-sm fixed-top\">\r\n          <button className=\"navbar-toggler pull-right\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapsibleNavbar\">\r\n            <span className=\"navbar-toggler-icon\" />\r\n          </button>\r\n          <div className=\"collapse navbar-collapse justify-content-end\" id=\"collapsibleNavbar\">\r\n            <ul className=\"navbar-nav\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"#welcome-section\">About</a>\r\n              </li> \r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"#software\">Software</a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"#crochet\">Crochet</a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"#photography\">Photography</a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"#contact\">Contact</a>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react'\r\nimport amanda from '../resources/amanda.jpg'\r\n\r\nexport default class Hero extends Component {\r\n  render() {\r\n    return (\r\n\r\n        <div className=\"parallax\">\r\n            <div class=\"hero-text\">\r\n                <section id=\"welcome-section\" class=\"d-flex flex-row justify-content-start align-items-center flex-wrap\">\r\n                    <img src={amanda} class=\"head-shot rounded-circle\"></img>\r\n                    <div class=\"header d-flex flex-column\">\r\n                    <h1>Amanda de Castilho</h1>\r\n                    <p>Software Engineering Student</p>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n        </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport './styles/main.css';\nimport Navbar from './components/navbar'\nimport Hero from './components/hero'\n\nclass App extends Component {\n  render() {\n    return (\n\t\t<div id=\"page\">\n\t\t\t\n\t\t\t<Navbar></Navbar>\n\t\t\t<Hero></Hero>\n\t\t\t<div className=\"temp\">\n\t\t\t\t<p>Welcome!</p> \n\t\t\t\t<p>This site is a work in progess, an opportunity for me to explore ReactJS, and share the things I love!</p>\n\t\t\t</div>\n\t\t</div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}